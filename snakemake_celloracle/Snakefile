# A snakemake pipeline to process Cicero results, to compute GRNs using CellOracle
# input: Cicero result
# output: Links object (a collection of cell-type specific GRNs), and a CellOracle object


# Global rule that specifies the final outputs of the pipeline
rule all:
    input:
        peak_file = "{filepath}/01_{data_id}_{peak_id}_peaks.csv"
        CCAN_file = "{filepath}/02_{data_id}_cicero_connections_{peak_id}_peaks.csv"
        #"{filepath}/05_{data_id}_base_GRN_dataframe.parquet"
        #expand("results/{data_id}_base_GRN_dataframe.parquet", data_id="your_data_id_here"),
        #expand("results/{data_id}_cluster_GRNs.links", data_id="your_data_id_here")
    output:
        "{filepath}/08_{data_id}_celltype_GRNs.celloracle.links"

# Rule for processing CCANs
rule process_CCANS:
    input:
        filepath="{filepath}",
        peak_file="{filepath}/01_{data_id}_{peak_id}_peaks.csv",
        CCAN_file="{filepath}/02_{data_id}_cicero_connections_{peak_id}_peaks.csv"
    output:
        csv="{filepath}/{filename}"
    params:
        cicero_score_threshold="{cicero_score_threshold}",
        save_figure="{save_figure}",
        figpath="{figpath}",
        filename = "03_{data_id}_processed_peak_file_danRer11.csv"
        #filename="{filename}"
    conda:
        "envs/celloracle_env.yaml"
    shell:
        """
        python scripts/process_CCANS.py {input.filepath} {input.peak_file} {input.CCAN_file} {params.cicero_score_threshold} {params.filename} {params.save_figure} {params.figpath}
        """


# Rule to compute the base GRN using CellOracle
rule celloracle_GRN:
    input:
        filepath="{filepath}",
        peaks_TSS_mapped="{peaks_TSS_mapped}"
    output:
        base_GRN="results/{data_id}_base_GRN_dataframe.parquet"
    params:
        data_id=DATA_ID,
        ref_genome="{ref_genome}",
        motif_score_threshold="{motif_score_threshold}"
    threads: 8  # Adjust the number of threads based on your system's specifications
    shell:
        """
        python scripts/celloracle_compute_baseGRN.py {input.filepath} {input.peaks_TSS_mapped} {params.data_id} {params.ref_genome} {params.motif_score_threshold}
        """

# Rule to compute cluster-specific GRNs using CellOracle
rule celloracle_cluster_GRNs:
    input:
        output_path="{output_path}",
        RNAdata_path="{RNAdata_path}",
        baseGRN_path="results/{data_id}_base_GRN_dataframe.parquet",
        data_id=DATA_ID,
        annotation="{annotation}",
        dim_reduce="{dim_reduce}",
        timepoints="{timepoints}"
    output:
        "results/{data_id}_cluster_GRNs.links"
    params: 
        script="scripts/celloracle_compute_clusterGRNs.py"
    threads: 8  # Adjust based on your system's specifications
    shell:
        """
        python {params.script} {input.output_path} {input.RNAdata_path} {input.baseGRN_path} {input.data_id} {input.annotation} {input.dim_reduce} {input.timepoints}
        """